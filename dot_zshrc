# Uncomment to profile shell with zprof.
# zmodload zsh/zprof

##
# OH MY ZSH!
# ----------

export ZSH_DISABLE_COMPFIX="true"
export ZSH="$HOME/.oh-my-zsh"
export ZSH_CUSTOM="$HOME/.local/share/oh-my-zsh"

# Disable auto-update if no .git directory is found.
if [[ ! -d "$ZSH/.git" ]]; then
  DISABLE_AUTO_UPDATE="true"
fi

ZSH_THEME="thomasjo"
CASE_SENSITIVE="true"
DISABLE_AUTO_TITLE="false"

# Enable brew completions to be automatically picked up.
# NOTE: We need to set FPATH before bootstrapping Oh My Zsh.
if [[ -d "/opt/homebrew" ]]; then
	FPATH="/opt/homebrew/share/zsh/site-functions:${FPATH}"
fi

# Enable user-defined completions to be automatically picked up.
FPATH="$HOME/.local/share/zsh/completions:${FPATH}"

plugins=(
	colored-man-pages
	git
	gitfast
	jump
	norce
)

source "$ZSH/oh-my-zsh.sh"


##
# Exports
# -------

# Locale
export LANG="en_US.UTF-8"
export LC_ALL="$LANG"

# Editors
export EDITOR="code --wait"
export GIT_EDITOR="${EDITOR} --new-window"

if [[ "$TERM_PROGRAM" == "vscode" ]]; then
	export EDITOR="code --wait"
	export GIT_EDITOR="${EDITOR} --reuse-window"
elif [[ -n "$SSH_CLIENT" ]]; then
	export EDITOR="nano"
	export GIT_EDITOR="${EDITOR}"
fi

# Homebrew
if [[ -d "/opt/homebrew" ]]; then
	export HOMEBREW_PREFIX="/opt/homebrew"
	export HOMEBREW_CELLAR="/opt/homebrew/Cellar"
	export HOMEBREW_REPOSITORY="/opt/homebrew"
	export PATH="/opt/homebrew/bin:/opt/homebrew/sbin${PATH+:$PATH}"
	export MANPATH="/opt/homebrew/share/man${MANPATH+:$MANPATH}:"
	export INFOPATH="/opt/homebrew/share/info:${INFOPATH:-}"

	export HOMEBREW_NO_ANALYTICS=1
	export HOMEBREW_NO_ENV_HINTS=1
fi

# Go
if [[ -d "$HOME/.local/share/go" ]]; then
	export GOPATH="$HOME/.local/share/go"
	export PATH="$GOPATH/bin:$PATH"
fi

# Rust
if [[ -d "$HOME/.local/share/rust" ]]; then
	export RUSTUP_HOME="$HOME/.local/share/rust/rustup"
	export CARGO_HOME="$HOME/.local/share/rust/cargo"
	export PATH="$CARGO_HOME/bin:$PATH"
fi

# Conda
if [[ -d "$HOME/.local/miniconda3" ]]; then
	conda_root="$HOME/.local/miniconda3"
	# Bootstrap using shellscript when possible.
	if [[ -f "$conda_root/etc/profile.d/conda.sh" ]]; then
		source "$conda_root/etc/profile.d/conda.sh"
		# Uncomment to initialize the base environment.
		# conda activate base
	else
		export PATH="$conda_root/bin:$PATH"
	fi
fi

# Pyenv
if [[ -d "$HOME/.pyenv" ]]; then
	export PYENV_ROOT="$HOME/.pyenv"
	export PATH="$PYENV_ROOT/bin:$PATH"

	export PYENV_VIRTUALENV_DISABLE_PROMPT=1
fi

# IPython
export IPYTHONDIR="$HOME/.config/ipython"

# Docker
if [[ -d "$HOME/.docker/bin" ]]; then
	export PATH="$HOME/.docker/bin:$PATH"
fi

# Rootless Docker
# TODO: Find a better way to do this.
if [[ -f "$HOME/.config/systemd/user/default.target.wants/docker.service" ]]; then
	export DOCKER_HOST="unix:///run/user/$(id -u)/docker.sock"
fi

# Google Cloud SDK
if [[ -d "$HOME/.local/share/google-cloud-sdk" ]]; then
	export CLOUDSDK_PYTHON="python3"
	export CLOUDSDK_ROOT_DIR="$HOME/.local/share/google-cloud-sdk"
	export PATH="$PATH:$CLOUDSDK_ROOT_DIR/bin"
fi

# User installed binaries
export PATH="$HOME/.local/bin:$PATH"

##
# Certificates
# ------------

# Check if custom CA bundle exists.
if [[ -f "$HOME/.ssl/certs/bundle.pem" ]]; then
	export CUSTOM_CA_BUNDLE="$HOME/.ssl/certs/bundle.pem"
	export SSL_CERT_FILE="${CUSTOM_CA_BUNDLE}"
	export CURL_CA_BUNDLE="${CUSTOM_CA_BUNDLE}"
	export REQUESTS_CA_BUNDLE="${CUSTOM_CA_BUNDLE}"
	export NODE_EXTRA_CA_CERTS="${CUSTOM_CA_BUNDLE}"
fi


##
# Aliases
# -------

alias less="less -R"
alias printenv="printenv | LC_ALL=C sort"
alias tree="tree -CA"

# Shorthands
alias cm="chezmoi"
alias d="docker"
alias dc="docker compose"
alias k="kubectl"

# jump (oh-my-zsh plugin)
alias J="jump"
alias M="mark"

# safe-rm: prevents potential disasters...
if [[ -x "$(command -v safe-rm)" ]]; then alias rm="safe-rm"; fi

# exa -> ls
if [[ -x "$(command -v exa)" ]]; then
	exa_base="exa --group-directories-first"
	exa_long="${exa_base} --long --git --classify"

	alias ls="${exa_base}"
	alias ll="${exa_long}"
	alias la="${exa_long} --all"
	alias lx="${exa_long} --all --extended"

	alias lS="${exa_base} --oneline"
	alias lT="${exa_base} --tree --level=2"

	# Remove leftover, unwanted ls aliases...
	ls_aliases=( $(alias | grep "ls " | cut -d= -f1) )
	for leftover in "${ls_aliases[@]}"; do
		unalias "${leftover}"
	done
fi


##
# Bootstrappers
# -------------

# Initialize direnv if installed.
if [[ -x "$(command -v direnv)" ]]; then eval "$(direnv hook zsh)"; fi

# Initialize pyenv if installed.
if [[ -x "$(command -v pyenv)" ]]; then eval "$(pyenv init -)"; fi

# Setup hub alias if hub is installed. (git -> hub)
if [[ -x "$(command -v hub)" ]]; then eval "$(hub alias -s)"; fi


##
# Miscellaneous
# -------------

# Ensure hostname is displayed as lowercase.
export HOST="${HOST:l}"
export HOSTNAME="${HOST}"

# Suppress annoying Python warnings.
export PYTHONWARNINGS="ignore:deprecation:Warning"
